Na classe ContaCorrenteServiceTest.java

    //* Implementar o teste unitário do criar conta;
    @Test
    void testarCriarNovaConta () {
        when(repository.save(contaCorrente)).thenReturn(contaCorrente);
        ContaCorrente contaCriada = service.criarConta(contaCorrente);
        assertNotNull(contaCriada);
    }


Na classe ContaCorrenteService.java

    public ContaCorrente criarConta(ContaCorrente contaCorrente) {

        //Implementar o método criar conta no service;
        //1. um titular deve ser informado
        if (contaCorrente.getTitular() == null) {
            throw new IllegalArgumentException("Um Titular deve ser informado");
        }
        //2. não é possível criar uma conta com zero ou menos reais, deve começar com um valor
        if (contaCorrente.getSaldo() == null || contaCorrente.getSaldo().compareTo(BigDecimal.ZERO) <= 0) {
            throw new ContaSemSaldoException("Saldo inicial deve ser maior que 0.");
        }

        return repository.save(contaCorrente);


Na classe ContaCorrenteController.java

    private final ContaCorrenteService service;

    //Implementar o endpoint criar conta;
    @PostMapping("nova-conta")
    public ContaCorrente criarNovaConta(@RequestBody ContaCorrente contaCorrente) {
        // chamada para uma nova conta
        ContaCorrente contaCriada = service.criarConta(contaCorrente);
        return contaCriada;
    }
    
    Na classe Bancoadaintegarcaotest

package br.com.bancoada.bancoada.integracao;
 
import br.com.bancoada.bancoada.BancoAdaApplication;
import com.fasterxml.jackson.databind.ObjectMapper;
import br.com.bancoada.bancoada.entity.ContaCorrente;
import br.com.bancoada.bancoada.repository.ContaCorrenteRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.mockito.ArgumentCaptor;
 
import java.math.BigDecimal;
 
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
@AutoConfigureMockMvc
@SpringBootTest(classes = BancoAdaApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
 
public class BancoAdaIntegracaoTest {
 
    @Autowired
    private MockMvc mockMvc;
 
    @Autowired
    ObjectMapper objectMapper;
 
    @Autowired
    private ContaCorrenteRepository repository;
 
    @Test
    void testarGetSaldo() throws Exception {
        // criar conta corrente
        ContaCorrente jorgeContaCorrente = new ContaCorrente();
        jorgeContaCorrente.setTitular("jorge");
        jorgeContaCorrente.setSaldo(new BigDecimal("22"));
 
        ContaCorrente contaDoJorge = repository.save(jorgeContaCorrente);
 
 
        //http://localhost:8080/conta-corrente/saldo?id=1
 
        // performa uma chamada para o endpoint
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .get("/conta-corrente/saldo").param("id", contaDoJorge.getId() + ""))
                .andDo(print())
                .andExpect(status().is2xxSuccessful())
                .andReturn();
 
        String body = result.getResponse().getContentAsString();
 
        BigDecimal saldoRetornado = new BigDecimal(body);
 
//        Assertions.assertEquals(new BigDecimal(22), saldoRetornado);
        Assertions.assertTrue(saldoRetornado.compareTo(new BigDecimal(22)) == 0);
    }
 
    @Test
    void depositar() throws Exception {
 
        // criando conta para teste
        ContaCorrente cc = new ContaCorrente();
        cc.setSaldo(new BigDecimal("22.39"));
        cc.setTitular("maria");
 
        //salvando e retornando conta de teste atualizada
        ContaCorrente contaCorrenteSalva = repository.save(cc);
 
        // testando chamada do endpoint depositar
        mockMvc.perform(MockMvcRequestBuilders
                        .put("/conta-corrente/{id}/depositar/11", contaCorrenteSalva.getId()))
                .andDo(print())
                .andExpect(status().is2xxSuccessful());
 
        // buscando conta a qual foi depositada
        ContaCorrente cc1 = repository.findById(contaCorrenteSalva.getId())
                .orElseThrow();
 
        // testando se saldo foi atualizado
        Assertions.assertEquals(new BigDecimal("33.39"), cc1.getSaldo());
    }
 
    @Test
    public void testarNovaConta() throws Exception {
 
        // crie conta para teste
        ContaCorrente novaConta = new ContaCorrente(); // instanciei o objeto
        novaConta.setTitular("Juliana");
        novaConta.setSaldo(new BigDecimal(40));
 
                mockMvc.perform(MockMvcRequestBuilders.post("/conta-corrente/nova-conta")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(novaConta)))
                .andExpect(status().isCreated())
                .andReturn();
 
            }
}

Classe contracorrenteService

package br.com.bancoada.bancoada.service;
 
import br.com.bancoada.bancoada.entity.ContaCorrente;
import br.com.bancoada.bancoada.exception.ContaInativaException;
import br.com.bancoada.bancoada.exception.ContaSemSaldoException;
import br.com.bancoada.bancoada.repository.ContaCorrenteRepository;
import org.springframework.stereotype.Service;
 
import java.math.BigDecimal;
import java.util.Optional;
 
@Service
public class ContaCorrenteService {
 
    private final ContaCorrenteRepository repository;
 
    public ContaCorrenteService(ContaCorrenteRepository repository) {
        this.repository = repository;
    }
 
    public ContaCorrente criarConta(ContaCorrente contaCorrente) {
        // toda a lógica para salvar uma nova conta no banco de dados
        // validar sem tem o titular e saldo zero ou maior
        return repository.save(contaCorrente);
    }
 
    public BigDecimal sacar(int contaCorrenteId, BigDecimal valor) {
 
        ContaCorrente conta = repository.findById(contaCorrenteId)
                .orElseThrow();
 
        if (valor != null && conta.getSaldo().compareTo(valor) >= 0) {
            efetuarSaque(conta, valor);
            return conta.getSaldo();
        }
 
        throw new RuntimeException("Erro ao sacar");
    }
 
    public BigDecimal transferir(int contaOrigemId, int contaDestinoId, BigDecimal valor) {
        ContaCorrente contaOrigem = repository.findById(contaOrigemId)
                .orElseThrow(() -> new IllegalStateException("conta origem inexistente"));
 
        ContaCorrente contaDestino = repository.findById(contaDestinoId)
                .orElseThrow(() -> new IllegalStateException("conta destino inexistente"));
 
        if (!contaOrigem.isAtiva()) {
            throw new ContaInativaException("conta de origem inativa");
        }
 
        if (!contaDestino.isAtiva()) {
            throw new ContaInativaException("conta de destino inativa");
        }
 
        if (valor == null || contaOrigem.getSaldo().compareTo(valor) < 0) {
            throw new ContaSemSaldoException("Saldo insuficiente");
        }
 
        efetuarTransferencia(contaOrigem, contaDestino, valor);
 
        // retornar o novo saldo da conta origem
        return contaOrigem.getSaldo();
    }
 
    public BigDecimal consultarSaldo(int idConta) {
 
        Optional<ContaCorrente> optional = repository.findById(idConta);
 
        if (optional.isPresent()) {
            ContaCorrente conta = optional.get();
 
            return conta.getSaldo();
        }
 
        throw new IllegalStateException("Conta inexistente");
    }
 
    public void depositar(int idConta, BigDecimal valor) {
        ContaCorrente conta = repository.findById(idConta)
                .orElseThrow(() -> new IllegalStateException("Conta inexistente"));
 
        if (!conta.isAtiva()) {
            throw new ContaInativaException("conta inativa");
        }
 
        conta.setSaldo(conta.getSaldo().add(valor));
        repository.save(conta);
    }
 
    private void efetuarSaque(ContaCorrente conta, BigDecimal valor) {
        conta.setSaldo(conta.getSaldo().subtract(valor));
        repository.save(conta);
    }
 
    private void efetuarTransferencia(ContaCorrente origem, ContaCorrente dest, BigDecimal valor) {
        origem.setSaldo(origem.getSaldo().subtract(valor));
        dest.setSaldo(dest.getSaldo().add(valor));
 
        // atualizando banco de dados
        repository.save(origem);
        repository.save(dest);
    }
}

Classe ContaCorrenteController
 
import br.com.bancoada.bancoada.entity.ContaCorrente;
import br.com.bancoada.bancoada.service.ContaCorrenteService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
 
import java.math.BigDecimal;
 
@RestController
@RequestMapping("/conta-corrente")
@RequiredArgsConstructor
public class ContaCorrenteController {
 
    private final ContaCorrenteService service;
 
    @PostMapping("/nova-conta")
    @ResponseStatus(code = HttpStatus.CREATED)
    public ContaCorrente criarNovaConta(@RequestBody ContaCorrente contaCorrente) {
        // chamada para uma nova conta
        // estou pegando a informação do service, pois lá criei o método "salvar conta".
         return service.criarConta(contaCorrente) ;
    }
 
    // www.bancoada.com/conta-corrente/saldo?id=1
    @GetMapping("/saldo")
    public BigDecimal consultarSaldo(@RequestParam("id") int idConta) {
        BigDecimal saldo = service.consultarSaldo(idConta);
        return saldo;
    }
 
    // www.bancoada.com/conta-corrente/1/sacar/20
    @PostMapping("/{id_conta}/sacar/{valor}")
    public ResponseEntity<BigDecimal> sacar(@PathVariable("id_conta") int idconta, @PathVariable BigDecimal valor) {
        BigDecimal novoSaldo = service.sacar(idconta, valor);
        return ResponseEntity.ok(novoSaldo);
    }
 
    // www.bancoada.com/conta-corrente/1/transferir/2/20
    @PostMapping("/{id_conta_origem}/transferir/{id_conta_destino}/{valor}")
    public ResponseEntity<BigDecimal> transferir(@PathVariable("id_conta_origem") int idContaOrigem,
                                                 @PathVariable("id_conta_destino") int idContaDestino,
                                                 @PathVariable BigDecimal valor) {
 
        BigDecimal novoSaldoOrigem = service.transferir(idContaOrigem, idContaDestino, valor);
        return ResponseEntity.ok(novoSaldoOrigem);
    }
 
    @PutMapping("/{idConta}/depositar/{valor}")
    public ResponseEntity<Void> depositar(@PathVariable int idConta, @PathVariable BigDecimal valor) {
        service.depositar(idConta, valor);
        return ResponseEntity.ok().build();
    }
 
    /**
     *TRABALHO FINAL
     *
     * Implementar o teste unitário do criar conta;
          *
     * Implementar o método criar conta no service;
     *
     *
     * - requisitos
     * 2. não é possível criar uma conta com zero ou menos reais, deve começar com um valor
     *
     */
}
